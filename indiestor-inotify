#!/usr/bin/php
<?php

/*
        Indiestor inotify program

	Written by Erik Poupaert, erik@sankuru.biz
        Commissioned at peopleperhour.com 
        By Alex Gardiner, alex.gardiner@canterbury.ac.uk
*/

require_once(dirname(__FILE__).'/lib/inotify/InEvent.php');
require_once(dirname(__FILE__).'/lib/admin/etcfiles/EtcPasswd.php');
require_once(dirname(__FILE__).'/lib/admin/etcfiles/EtcGroup.php');
require_once(dirname(__FILE__).'/lib/admin/action-engine/Incrontab.php');
require_once(dirname(__FILE__).'/lib/inotify/syslog.php');
require_once(dirname(__FILE__).'/lib/inotify/SharingStructureDefault.php');
require_once(dirname(__FILE__).'/lib/inotify/SharingStructureAvid.php');
require_once(dirname(__FILE__).'/lib/inotify/SharingStructureMXF.php');
require_once(dirname(__FILE__).'/lib/inotify/SharingOperations.php');
require_once(dirname(__FILE__).'/lib/inotify/SharingFolders.php');
require_once(dirname(__FILE__).'/lib/inotify/LockingMechanism.php');

syslog_notice_start_running();

//syslog error handling
function customError($errno,$errmsg,$errfile,$errline)
{
	syslog_notice("err:$errno,$errmsg in file $errfile, line $errline");
	die();
}
set_error_handler("customError");

//catch fatal errors
function handleShutdown()
{
	$error = error_get_last();
	if($error !== NULL)
		customError('FATAL-SHUTDOWN',$error['message'],$error['file'],$error['line']);
}
register_shutdown_function('handleShutdown');

//prepare commandline args
$inEvent=new InEvent();

//only handle project folders or Avid MediaFiles folder
if($inEvent->watchType=='MAIN' && 
	!SharingFolders::isProjectFolder($inEvent->fsObject) &&
	$inEvent->fsObject!='Avid MediaFiles'
) terminate("folder concerned '{$inEvent->fsObject}' not a project folder");

//only handle .avp/.avs files
if($inEvent->watchType=='PRJ' && 
	!SharingFolders::endsWith($inEvent->fsObject,'.avp') &&
	!SharingFolders::endsWith($inEvent->fsObject,'.avs')
) terminate("avid file concerned '{$inEvent->fsObject}' not a .avp nor .avs file");

//find user for folder
$homeFolder=$inEvent->homeFolder();
$etcPasswd=EtcPasswd::instance();
$user=$etcPasswd->findUserByHomeFolder($homeFolder);
if($user==null) terminate("Cannot find user for home folder '$homeFolder'");
$userName=$user->name;

//find group for user
$etcGroup=EtcGroup::instance();
$group=$etcGroup->findGroupForUserName($userName);
if($group==null) terminate("Cannot find group for user '$userName'");
$groupName=$group->name;

//we know user and group now
syslog_notice("user is: '$userName' group is: '$groupName'");

//retrieve all group members
$members=$etcPasswd->findUsersForEtcGroup($group);

$lockingMechanism=new LockingMechanism($groupName);
$lockingMechanism->lock();
do
{
	if(($inEvent->watchType=='MAIN' && SharingFolders::isAvidProjectFolder($inEvent->fsObject)) ||
		$inEvent->watchType=='PRJ')
	{
		SharingStructureAvid::reshare($groupName,$members);
		SharingStructureMXF::reshare($members);
	}
	else
	{
		SharingStructureDefault::reshare($groupName,$members);
	}
	SharingStructureMXF::reshare($members);
}
while($lockingMechanism->mustReRun());
$lockingMechanism->unlock();

Incrontab::generate();

//notify end run
syslog_notice_end_running();

